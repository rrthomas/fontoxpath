{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.19.4",
    "schemaVersion": 1004,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      }
    }
  },
  "kind": "Package",
  "canonicalReference": "fontoxpath!",
  "docComment": "",
  "name": "fontoxpath",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "fontoxpath!",
      "name": "",
      "members": [
        {
          "kind": "TypeAlias",
          "canonicalReference": "fontoxpath!Attr_2:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Attr = "
            },
            {
              "kind": "Reference",
              "text": "Node",
              "canonicalReference": "fontoxpath!Node:type"
            },
            {
              "kind": "Content",
              "text": " & {\n    localName: string;\n    name: string;\n    namespaceURI: string | null;\n    nodeName: string;\n    prefix: string | null;\n    value: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Attr_2",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "fontoxpath!Bucket:type",
          "docComment": "/**\n * Buckets are an optimization to XPaths. They are passed whenever FontoXPath can determine that only certain types of nodes will be used.\n *\n * For example, when evaluating the `child::element()` XPath, the `domFacade#getChildNodes` method will be called with a `type-1` bucket. Signaling text nodes or comments do not have to be returned.\n *\n * @see\n *\n * getBucketsForNode\n *\n * @see\n *\n * getBucketForSelector\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Bucket = "
            },
            {
              "kind": "Content",
              "text": "'type-1' | 'type-2' | 'type-3' | 'type-4' | 'type-7' | 'type-8' | 'type-9' | 'type-10' | 'type-11' | `name-${string}` | 'name' | 'type-1-or-type-2' | 'empty'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Bucket",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "fontoxpath!CDATASection_2:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CDATASection = "
            },
            {
              "kind": "Reference",
              "text": "CharacterData",
              "canonicalReference": "fontoxpath!CharacterData:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CDATASection_2",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "fontoxpath!CharacterData_2:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CharacterData = "
            },
            {
              "kind": "Reference",
              "text": "Node",
              "canonicalReference": "fontoxpath!Node:type"
            },
            {
              "kind": "Content",
              "text": " & {\n    data: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CharacterData_2",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "fontoxpath!Comment_2:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Comment = "
            },
            {
              "kind": "Reference",
              "text": "CharacterData",
              "canonicalReference": "fontoxpath!CharacterData:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Comment_2",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "fontoxpath!compareSpecificity:function(1)",
          "docComment": "/**\n * Compare the specificity of two XPath expressions. This function will return -1 if the second XPath is more specific, 1 if the first one is more specific and 0 if they are equal in specificity.\n *\n * @param xpathExpressionA - The first XPath to compare\n *\n * @param xpathExpressionB - The XPath to compare to\n *\n * @returns Either 1, 0, or -1\n *\n * @example\n *\n * compareSpecificity('self::a', 'self::a[\\@b]') === -1; compareSpecificity('self::a', 'self::a and child::b') === -1; compareSpecificity('self::*', 'self::a') === 1; compareSpecificity('self::a', 'self::a') === 0;\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function compareSpecificity(xpathExpressionA: "
            },
            {
              "kind": "Reference",
              "text": "EvaluableExpression",
              "canonicalReference": "fontoxpath!EvaluableExpression:type"
            },
            {
              "kind": "Content",
              "text": ", xpathExpressionB: "
            },
            {
              "kind": "Reference",
              "text": "EvaluableExpression",
              "canonicalReference": "fontoxpath!EvaluableExpression:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "-1 | 0 | 1"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "xpathExpressionA",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "xpathExpressionB",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "compareSpecificity"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "fontoxpath!CompiledXPathFunction:type",
          "docComment": "/**\n * The (compiled) result of what {@link compileXPathToJavaScript} generated.\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CompiledXPathFunction<TNode extends "
            },
            {
              "kind": "Reference",
              "text": "Node",
              "canonicalReference": "fontoxpath!Node:type"
            },
            {
              "kind": "Content",
              "text": " "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "Node",
              "canonicalReference": "fontoxpath!Node:type"
            },
            {
              "kind": "Content",
              "text": ", TReturnType extends "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "fontoxpath!ReturnType:enum"
            },
            {
              "kind": "Content",
              "text": " "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "ReturnType.ANY",
              "canonicalReference": "fontoxpath!ReturnType.ANY:member"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "() => (contextItem: unknown, domFacade: unknown, runtimeLib: unknown) => "
            },
            {
              "kind": "Reference",
              "text": "IReturnTypes",
              "canonicalReference": "fontoxpath!IReturnTypes:interface"
            },
            {
              "kind": "Content",
              "text": "<TNode>[TReturnType]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Beta",
          "name": "CompiledXPathFunction",
          "typeParameters": [
            {
              "typeParameterName": "TNode",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              }
            },
            {
              "typeParameterName": "TReturnType",
              "constraintTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "defaultTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 11,
            "endIndex": 14
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "fontoxpath!compileXPathToJavaScript:function(1)",
          "docComment": "/**\n * Compile a given query to JavaScript code. For executing compiled code, see {@link executeJavaScriptCompiledXPath}.\n *\n * @param selector - The selector to compile.\n *\n * @param returnType - One of the return types indicating the value to be returned when executing the query.\n *\n * @param returnType - Type compiled code should return.\n *\n * @param options - Extra options for compiling this XPath.\n *\n * @returns A string JavaScript code representing the given selector.\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function compileXPathToJavaScript(selector: "
            },
            {
              "kind": "Reference",
              "text": "EvaluableExpression",
              "canonicalReference": "fontoxpath!EvaluableExpression:type"
            },
            {
              "kind": "Content",
              "text": ", returnType?: "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "fontoxpath!ReturnType:enum"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "Options",
              "canonicalReference": "fontoxpath!Options:type"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "JavaScriptCompiledXPathResult",
              "canonicalReference": "fontoxpath!JavaScriptCompiledXPathResult:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Beta",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "selector",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "returnType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              }
            }
          ],
          "name": "compileXPathToJavaScript"
        },
        {
          "kind": "Variable",
          "canonicalReference": "fontoxpath!createTypedValueFactory:var",
          "docComment": "/**\n * Creates a factory to convert values into a specific type.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "createTypedValueFactory: "
            },
            {
              "kind": "Reference",
              "text": "ExternalTypedValueFactory",
              "canonicalReference": "fontoxpath!~ExternalTypedValueFactory:type"
            }
          ],
          "releaseTag": "Public",
          "name": "createTypedValueFactory",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "fontoxpath!Document_2:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Document = "
            },
            {
              "kind": "Reference",
              "text": "Node",
              "canonicalReference": "fontoxpath!Node:type"
            },
            {
              "kind": "Content",
              "text": " & {\n    implementation: {\n        createDocument(namespaceURI: null, qualifiedNameStr: null, documentType: null): "
            },
            {
              "kind": "Reference",
              "text": "Document",
              "canonicalReference": "fontoxpath!Document:type"
            },
            {
              "kind": "Content",
              "text": ";\n    };\n    createAttributeNS(namespaceURI: string, name: string): "
            },
            {
              "kind": "Reference",
              "text": "Attr",
              "canonicalReference": "fontoxpath!Attr:type"
            },
            {
              "kind": "Content",
              "text": ";\n    createCDATASection(contents: string): "
            },
            {
              "kind": "Reference",
              "text": "CDATASection",
              "canonicalReference": "fontoxpath!CDATASection:type"
            },
            {
              "kind": "Content",
              "text": ";\n    createComment(data: string): "
            },
            {
              "kind": "Reference",
              "text": "Comment",
              "canonicalReference": "fontoxpath!Comment:type"
            },
            {
              "kind": "Content",
              "text": ";\n    createElementNS(namespaceURI: string, qualifiedName: string): "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "fontoxpath!Element:type"
            },
            {
              "kind": "Content",
              "text": ";\n    createProcessingInstruction(target: string, data: string): "
            },
            {
              "kind": "Reference",
              "text": "ProcessingInstruction",
              "canonicalReference": "fontoxpath!ProcessingInstruction:type"
            },
            {
              "kind": "Content",
              "text": ";\n    createTextNode(data: string): "
            },
            {
              "kind": "Reference",
              "text": "Text",
              "canonicalReference": "fontoxpath!Text:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Document_2",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 17
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "fontoxpath!domFacade:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "domFacade: "
            },
            {
              "kind": "Reference",
              "text": "IDomFacade",
              "canonicalReference": "fontoxpath!default:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "domFacade",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "fontoxpath!Element_2:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Element = "
            },
            {
              "kind": "Reference",
              "text": "Node",
              "canonicalReference": "fontoxpath!Node:type"
            },
            {
              "kind": "Content",
              "text": " & {\n    localName: string;\n    namespaceURI: string | null;\n    nodeName: string;\n    prefix: string | null;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Element_2",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "fontoxpath!EvaluableExpression:type",
          "docComment": "/**\n * An XQuery or XPath Expression that can be evaluated. Commonly a string like `descendant::p` or `ancestor::div[@class=\"my-class\"]`. This can also be an element that represents the root of an [XQueryX](https://www.w3.org/TR/xqueryx-31/) DOM tree. These XQueryX elements can be acquired using the {@link parseScript} function or they can be built by hand\n *\n * @see\n *\n * parseScript\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type EvaluableExpression = "
            },
            {
              "kind": "Content",
              "text": "string | "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "fontoxpath!Element:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "EvaluableExpression",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "fontoxpath!evaluateUpdatingExpression:function(1)",
          "docComment": "/**\n * Evaluates an XPath on the given contextItem. Returns the string result as if the XPath is wrapped in string(...).\n *\n * @param updateScript - The update script to execute. Supports XPath 3.1.\n *\n * @param contextItem - The node from which to run the XPath.\n *\n * @param domFacade - The domFacade (or DomFacade like interface) for retrieving relations.\n *\n * @param variables - Extra variables (name to value). Values can be number, string, boolean, nodes or object literals and arrays.\n *\n * @param options - Extra options for evaluating this XPath.\n *\n * @returns The query result and pending update list.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default function evaluateUpdatingExpression(updateScript: "
            },
            {
              "kind": "Reference",
              "text": "EvaluableExpression",
              "canonicalReference": "fontoxpath!EvaluableExpression:type"
            },
            {
              "kind": "Content",
              "text": ", contextItem?: "
            },
            {
              "kind": "Content",
              "text": "any | null"
            },
            {
              "kind": "Content",
              "text": ", domFacade?: "
            },
            {
              "kind": "Reference",
              "text": "IDomFacade",
              "canonicalReference": "fontoxpath!default:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ", variables?: "
            },
            {
              "kind": "Content",
              "text": "{\n    [s: string]: any;\n} | null"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "UpdatingOptions",
              "canonicalReference": "fontoxpath!UpdatingOptions:type"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<{\n    pendingUpdateList: object[];\n    xdmValue: any[];\n}>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "updateScript",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "contextItem",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "domFacade",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              }
            },
            {
              "parameterName": "variables",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              }
            }
          ],
          "name": "evaluateUpdatingExpression"
        },
        {
          "kind": "Function",
          "canonicalReference": "fontoxpath!evaluateUpdatingExpressionSync:function(1)",
          "docComment": "/**\n * Evaluates an update script to a pending update list. See [XQUF](https://www.w3.org/TR/xquery-update-30/) for more information on XQuery Update Facility.\n *\n * @param updateScript - The update script to execute. Supports XPath 3.1.\n *\n * @param contextItem - The node from which to run the XPath.\n *\n * @param domFacade - The domFacade (or DomFacade like interface) for retrieving relations.\n *\n * @param variables - Extra variables (name to value). Values can be number, string, boolean, nodes or object literals and arrays.\n *\n * @param options - Extra options for evaluating this XPath.\n *\n * @returns The query result and pending update list.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default function evaluateUpdatingExpressionSync<TNode extends "
            },
            {
              "kind": "Reference",
              "text": "Node",
              "canonicalReference": "fontoxpath!Node:type"
            },
            {
              "kind": "Content",
              "text": ", TReturnType extends "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "fontoxpath!ReturnType:enum"
            },
            {
              "kind": "Content",
              "text": ">(updateScript: "
            },
            {
              "kind": "Reference",
              "text": "EvaluableExpression",
              "canonicalReference": "fontoxpath!EvaluableExpression:type"
            },
            {
              "kind": "Content",
              "text": ", contextItem?: "
            },
            {
              "kind": "Content",
              "text": "any | null"
            },
            {
              "kind": "Content",
              "text": ", domFacade?: "
            },
            {
              "kind": "Reference",
              "text": "IDomFacade",
              "canonicalReference": "fontoxpath!default:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ", variables?: "
            },
            {
              "kind": "Content",
              "text": "{\n    [s: string]: any;\n} | null"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "UpdatingOptions",
              "canonicalReference": "fontoxpath!UpdatingOptions:type"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "{\n    pendingUpdateList: object[];\n    xdmValue: "
            },
            {
              "kind": "Reference",
              "text": "IReturnTypes",
              "canonicalReference": "fontoxpath!IReturnTypes:interface"
            },
            {
              "kind": "Content",
              "text": "<TNode>[TReturnType];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 17,
            "endIndex": 20
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "updateScript",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "contextItem",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            },
            {
              "parameterName": "domFacade",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              }
            },
            {
              "parameterName": "variables",
              "parameterTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 13
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 14,
                "endIndex": 16
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "TNode",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TReturnType",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "evaluateUpdatingExpressionSync"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "fontoxpath!EvaluateXPath:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type EvaluateXPath = "
            },
            {
              "kind": "Content",
              "text": "{\n    <TNode extends "
            },
            {
              "kind": "Reference",
              "text": "Node",
              "canonicalReference": "fontoxpath!Node:type"
            },
            {
              "kind": "Content",
              "text": ", TReturnType extends "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "fontoxpath!ReturnType:enum"
            },
            {
              "kind": "Content",
              "text": ">(selector: "
            },
            {
              "kind": "Reference",
              "text": "EvaluableExpression",
              "canonicalReference": "fontoxpath!EvaluableExpression:type"
            },
            {
              "kind": "Content",
              "text": ", contextItem?: any | null, domFacade?: "
            },
            {
              "kind": "Reference",
              "text": "IDomFacade",
              "canonicalReference": "fontoxpath!default:interface"
            },
            {
              "kind": "Content",
              "text": " | null, variables?: {\n        [s: string]: any;\n    } | null, returnType?: TReturnType, options?: "
            },
            {
              "kind": "Reference",
              "text": "Options",
              "canonicalReference": "fontoxpath!Options:type"
            },
            {
              "kind": "Content",
              "text": " | null): "
            },
            {
              "kind": "Reference",
              "text": "IReturnTypes",
              "canonicalReference": "fontoxpath!IReturnTypes:interface"
            },
            {
              "kind": "Content",
              "text": "<TNode>[TReturnType];\n    ANY_TYPE: "
            },
            {
              "kind": "Reference",
              "text": "ReturnType.ANY",
              "canonicalReference": "fontoxpath!ReturnType.ANY:member"
            },
            {
              "kind": "Content",
              "text": ";\n    ARRAY_TYPE: "
            },
            {
              "kind": "Reference",
              "text": "ReturnType.ARRAY",
              "canonicalReference": "fontoxpath!ReturnType.ARRAY:member"
            },
            {
              "kind": "Content",
              "text": ";\n    ASYNC_ITERATOR_TYPE: "
            },
            {
              "kind": "Reference",
              "text": "ReturnType.ASYNC_ITERATOR",
              "canonicalReference": "fontoxpath!ReturnType.ASYNC_ITERATOR:member"
            },
            {
              "kind": "Content",
              "text": ";\n    BOOLEAN_TYPE: "
            },
            {
              "kind": "Reference",
              "text": "ReturnType.BOOLEAN",
              "canonicalReference": "fontoxpath!ReturnType.BOOLEAN:member"
            },
            {
              "kind": "Content",
              "text": ";\n    FIRST_NODE_TYPE: "
            },
            {
              "kind": "Reference",
              "text": "ReturnType.FIRST_NODE",
              "canonicalReference": "fontoxpath!ReturnType.FIRST_NODE:member"
            },
            {
              "kind": "Content",
              "text": ";\n    MAP_TYPE: "
            },
            {
              "kind": "Reference",
              "text": "ReturnType.MAP",
              "canonicalReference": "fontoxpath!ReturnType.MAP:member"
            },
            {
              "kind": "Content",
              "text": ";\n    NODES_TYPE: "
            },
            {
              "kind": "Reference",
              "text": "ReturnType.NODES",
              "canonicalReference": "fontoxpath!ReturnType.NODES:member"
            },
            {
              "kind": "Content",
              "text": ";\n    NUMBER_TYPE: "
            },
            {
              "kind": "Reference",
              "text": "ReturnType.NUMBER",
              "canonicalReference": "fontoxpath!ReturnType.NUMBER:member"
            },
            {
              "kind": "Content",
              "text": ";\n    NUMBERS_TYPE: "
            },
            {
              "kind": "Reference",
              "text": "ReturnType.NUMBERS",
              "canonicalReference": "fontoxpath!ReturnType.NUMBERS:member"
            },
            {
              "kind": "Content",
              "text": ";\n    STRING_TYPE: "
            },
            {
              "kind": "Reference",
              "text": "ReturnType.STRING",
              "canonicalReference": "fontoxpath!ReturnType.STRING:member"
            },
            {
              "kind": "Content",
              "text": ";\n    STRINGS_TYPE: "
            },
            {
              "kind": "Reference",
              "text": "ReturnType.STRINGS",
              "canonicalReference": "fontoxpath!ReturnType.STRINGS:member"
            },
            {
              "kind": "Content",
              "text": ";\n    XPATH_3_1_LANGUAGE: "
            },
            {
              "kind": "Reference",
              "text": "Language.XPATH_3_1_LANGUAGE",
              "canonicalReference": "fontoxpath!Language.XPATH_3_1_LANGUAGE:member"
            },
            {
              "kind": "Content",
              "text": ";\n    XQUERY_3_1_LANGUAGE: "
            },
            {
              "kind": "Reference",
              "text": "Language.XQUERY_3_1_LANGUAGE",
              "canonicalReference": "fontoxpath!Language.XQUERY_3_1_LANGUAGE:member"
            },
            {
              "kind": "Content",
              "text": ";\n    XQUERY_UPDATE_3_1_LANGUAGE: "
            },
            {
              "kind": "Reference",
              "text": "Language.XQUERY_UPDATE_3_1_LANGUAGE",
              "canonicalReference": "fontoxpath!Language.XQUERY_UPDATE_3_1_LANGUAGE:member"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "EvaluateXPath",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 42
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "fontoxpath!evaluateXPath:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "_default: "
            },
            {
              "kind": "Reference",
              "text": "EvaluateXPath",
              "canonicalReference": "fontoxpath!EvaluateXPath:type"
            }
          ],
          "releaseTag": "Public",
          "name": "evaluateXPath",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "fontoxpath!evaluateXPathToArray:function(1)",
          "docComment": "/**\n * Evaluates an XPath on the given contextNode. Returns the result as an array, if the result is an XPath array.\n *\n * @param selector - The selector to execute. Supports XPath 3.1.\n *\n * @param contextItem - The node from which to run the XPath.\n *\n * @param domFacade - The domFacade (or DomFacade like interface) for retrieving relations.\n *\n * @param variables - Extra variables (name to value). Values can be number, string, boolean, nodes or object literals and arrays.\n *\n * @param options - Extra options for evaluating this XPath.\n *\n * @returns The array result, as a JavaScript array with atomized values.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default function evaluateXPathToArray(selector: "
            },
            {
              "kind": "Reference",
              "text": "EvaluableExpression",
              "canonicalReference": "fontoxpath!EvaluableExpression:type"
            },
            {
              "kind": "Content",
              "text": ", contextItem?: "
            },
            {
              "kind": "Content",
              "text": "any | null"
            },
            {
              "kind": "Content",
              "text": ", domFacade?: "
            },
            {
              "kind": "Reference",
              "text": "IDomFacade",
              "canonicalReference": "fontoxpath!default:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ", variables?: "
            },
            {
              "kind": "Content",
              "text": "{\n    [s: string]: any;\n} | null"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "Options",
              "canonicalReference": "fontoxpath!Options:type"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "any[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "selector",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "contextItem",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "domFacade",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              }
            },
            {
              "parameterName": "variables",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              }
            }
          ],
          "name": "evaluateXPathToArray"
        },
        {
          "kind": "Function",
          "canonicalReference": "fontoxpath!evaluateXPathToAsyncIterator:function(1)",
          "docComment": "/**\n * Evaluates an XPath on the given contextNode. Returns the result as an async iterator\n *\n * @param selector - The selector to execute. Supports XPath 3.1.\n *\n * @param contextItem - The node from which to run the XPath.\n *\n * @param domFacade - The domFacade (or DomFacade like interface) for retrieving relations.\n *\n * @param variables - Extra variables (name to value). Values can be number, string, boolean, nodes or object literals and arrays.\n *\n * @param options - Extra options for evaluating this XPath.\n *\n * @returns An async iterator to the return values.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default function evaluateXPathToAsyncIterator(selector: "
            },
            {
              "kind": "Reference",
              "text": "EvaluableExpression",
              "canonicalReference": "fontoxpath!EvaluableExpression:type"
            },
            {
              "kind": "Content",
              "text": ", contextItem?: "
            },
            {
              "kind": "Content",
              "text": "any | null"
            },
            {
              "kind": "Content",
              "text": ", domFacade?: "
            },
            {
              "kind": "Reference",
              "text": "IDomFacade",
              "canonicalReference": "fontoxpath!default:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ", variables?: "
            },
            {
              "kind": "Content",
              "text": "{\n    [s: string]: any;\n} | null"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "Options",
              "canonicalReference": "fontoxpath!Options:type"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "AsyncIterableIterator",
              "canonicalReference": "!AsyncIterableIterator:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "selector",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "contextItem",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "domFacade",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              }
            },
            {
              "parameterName": "variables",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              }
            }
          ],
          "name": "evaluateXPathToAsyncIterator"
        },
        {
          "kind": "Function",
          "canonicalReference": "fontoxpath!evaluateXPathToBoolean:function(1)",
          "docComment": "/**\n * Evaluates an XPath on the given contextNode.\n *\n * @param selector - The selector to execute. Supports XPath 3.1.\n *\n * @param contextItem - The node from which to run the XPath.\n *\n * @param domFacade - The domFacade (or DomFacade like interface) for retrieving relations.\n *\n * @param variables - Extra variables (name to value). Values can be number, string, boolean, nodes or object literals and arrays.\n *\n * @param options - Extra options for evaluating this XPath.\n *\n * @returns A boolean result\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default function evaluateXPathToBoolean(selector: "
            },
            {
              "kind": "Reference",
              "text": "EvaluableExpression",
              "canonicalReference": "fontoxpath!EvaluableExpression:type"
            },
            {
              "kind": "Content",
              "text": ", contextItem?: "
            },
            {
              "kind": "Content",
              "text": "any | null"
            },
            {
              "kind": "Content",
              "text": ", domFacade?: "
            },
            {
              "kind": "Reference",
              "text": "IDomFacade",
              "canonicalReference": "fontoxpath!default:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ", variables?: "
            },
            {
              "kind": "Content",
              "text": "{\n    [s: string]: any;\n} | null"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "Options",
              "canonicalReference": "fontoxpath!Options:type"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "selector",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "contextItem",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "domFacade",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              }
            },
            {
              "parameterName": "variables",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              }
            }
          ],
          "name": "evaluateXPathToBoolean"
        },
        {
          "kind": "Function",
          "canonicalReference": "fontoxpath!evaluateXPathToFirstNode:function(1)",
          "docComment": "/**\n * Evaluates an XPath on the given contextNode. Returns the first node result.\n *\n * @param selector - The selector to execute. Supports XPath 3.1.\n *\n * @param contextItem - The node from which to run the XPath.\n *\n * @param domFacade - The domFacade (or DomFacade like interface) for retrieving relations.\n *\n * @param variables - Extra variables (name to value). Values can be number, string, boolean, nodes or object literals and arrays.\n *\n * @param options - Extra options for evaluating this XPath.\n *\n * @returns The first matching node, in the order defined by the XPath.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default function evaluateXPathToFirstNode<T extends "
            },
            {
              "kind": "Reference",
              "text": "Node",
              "canonicalReference": "fontoxpath!Node:type"
            },
            {
              "kind": "Content",
              "text": ">(selector: "
            },
            {
              "kind": "Reference",
              "text": "EvaluableExpression",
              "canonicalReference": "fontoxpath!EvaluableExpression:type"
            },
            {
              "kind": "Content",
              "text": ", contextItem?: "
            },
            {
              "kind": "Content",
              "text": "any | null"
            },
            {
              "kind": "Content",
              "text": ", domFacade?: "
            },
            {
              "kind": "Reference",
              "text": "IDomFacade",
              "canonicalReference": "fontoxpath!default:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ", variables?: "
            },
            {
              "kind": "Content",
              "text": "{\n    [s: string]: any;\n} | null"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "Options",
              "canonicalReference": "fontoxpath!Options:type"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T | null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 15,
            "endIndex": 16
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "selector",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "contextItem",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "domFacade",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              }
            },
            {
              "parameterName": "variables",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 14
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "evaluateXPathToFirstNode"
        },
        {
          "kind": "Function",
          "canonicalReference": "fontoxpath!evaluateXPathToMap:function(1)",
          "docComment": "/**\n * Evaluates an XPath on the given contextNode. Returns the result as a map, if the result is an XPath map.\n *\n * @param selector - The selector to execute. Supports XPath 3.1.\n *\n * @param contextItem - The node from which to run the XPath.\n *\n * @param domFacade - The domFacade (or DomFacade like interface) for retrieving relations.\n *\n * @param variables - Extra variables (name to value). Values can be number, string, boolean, nodes or object literals and arrays.\n *\n * @param options - Extra options for evaluating this XPath.\n *\n * @returns The map result, as an object. Because of JavaScript constraints, key 1 and '1' are the same. The values in this map are the JavaScript simple types. See evaluateXPath for more details in mapping types.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default function evaluateXPathToMap(selector: "
            },
            {
              "kind": "Reference",
              "text": "EvaluableExpression",
              "canonicalReference": "fontoxpath!EvaluableExpression:type"
            },
            {
              "kind": "Content",
              "text": ", contextItem?: "
            },
            {
              "kind": "Content",
              "text": "any | null"
            },
            {
              "kind": "Content",
              "text": ", domFacade?: "
            },
            {
              "kind": "Reference",
              "text": "IDomFacade",
              "canonicalReference": "fontoxpath!default:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ", variables?: "
            },
            {
              "kind": "Content",
              "text": "{\n    [s: string]: any;\n} | null"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "Options",
              "canonicalReference": "fontoxpath!Options:type"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "{\n    [s: string]: any;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "selector",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "contextItem",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "domFacade",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              }
            },
            {
              "parameterName": "variables",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              }
            }
          ],
          "name": "evaluateXPathToMap"
        },
        {
          "kind": "Function",
          "canonicalReference": "fontoxpath!evaluateXPathToNodes:function(1)",
          "docComment": "/**\n * Evaluates an XPath on the given contextNode. Returns all nodes the XPath resolves to. Returns result in the order defined in the XPath. The path operator ('/'), the union operator ('union' and '|') will sort. This implies (//A, //B) resolves to all A nodes, followed by all B nodes, both in document order, but not merged. However: (//A | //B) resolves to all A and B nodes in document order.\n *\n * @param selector - The selector to execute. Supports XPath 3.1.\n *\n * @param contextItem - The node from which to run the XPath.\n *\n * @param domFacade - The domFacade (or DomFacade like interface) for retrieving relations.\n *\n * @param variables - Extra variables (name to value). Values can be number, string, boolean, nodes or object literals and arrays.\n *\n * @param options - Extra options for evaluating this XPath.\n *\n * @returns All matching Nodes, in the order defined by the XPath.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default function evaluateXPathToNodes<T extends "
            },
            {
              "kind": "Reference",
              "text": "Node",
              "canonicalReference": "fontoxpath!Node:type"
            },
            {
              "kind": "Content",
              "text": ">(selector: "
            },
            {
              "kind": "Reference",
              "text": "EvaluableExpression",
              "canonicalReference": "fontoxpath!EvaluableExpression:type"
            },
            {
              "kind": "Content",
              "text": ", contextItem?: "
            },
            {
              "kind": "Content",
              "text": "any | null"
            },
            {
              "kind": "Content",
              "text": ", domFacade?: "
            },
            {
              "kind": "Reference",
              "text": "IDomFacade",
              "canonicalReference": "fontoxpath!default:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ", variables?: "
            },
            {
              "kind": "Content",
              "text": "{\n    [s: string]: any;\n} | null"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "Options",
              "canonicalReference": "fontoxpath!Options:type"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 15,
            "endIndex": 16
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "selector",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "contextItem",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "domFacade",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              }
            },
            {
              "parameterName": "variables",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 14
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "evaluateXPathToNodes"
        },
        {
          "kind": "Function",
          "canonicalReference": "fontoxpath!evaluateXPathToNumber:function(1)",
          "docComment": "/**\n * Evaluates an XPath on the given contextNode. Returns the numeric result.\n *\n * @param selector - The selector to execute. Supports XPath 3.1.\n *\n * @param contextItem - The node from which to run the XPath.\n *\n * @param domFacade - The domFacade (or DomFacade like interface) for retrieving relations.\n *\n * @param variables - Extra variables (name to value). Values can be number, string, boolean, nodes or object literals and arrays.\n *\n * @param options - Extra options for evaluating this XPath.\n *\n * @returns The numerical result.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default function evaluateXPathToNumber(selector: "
            },
            {
              "kind": "Reference",
              "text": "EvaluableExpression",
              "canonicalReference": "fontoxpath!EvaluableExpression:type"
            },
            {
              "kind": "Content",
              "text": ", contextItem?: "
            },
            {
              "kind": "Content",
              "text": "any | null"
            },
            {
              "kind": "Content",
              "text": ", domFacade?: "
            },
            {
              "kind": "Reference",
              "text": "IDomFacade",
              "canonicalReference": "fontoxpath!default:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ", variables?: "
            },
            {
              "kind": "Content",
              "text": "{\n    [s: string]: any;\n} | null"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "Options",
              "canonicalReference": "fontoxpath!Options:type"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "selector",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "contextItem",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "domFacade",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              }
            },
            {
              "parameterName": "variables",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              }
            }
          ],
          "name": "evaluateXPathToNumber"
        },
        {
          "kind": "Function",
          "canonicalReference": "fontoxpath!evaluateXPathToNumbers:function(1)",
          "docComment": "/**\n * Evaluates an XPath on the given contextNode. Returns the numeric result.\n *\n * @param selector - The selector to execute. Supports XPath 3.1.\n *\n * @param contextItem - The node from which to run the XPath.\n *\n * @param domFacade - The domFacade (or DomFacade like interface) for retrieving relations.\n *\n * @param variables - Extra variables (name to value). Values can be number, string, boolean, nodes or object literals and arrays.\n *\n * @param options - Extra options for evaluating this XPath.\n *\n * @returns The numerical results.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default function evaluateXPathToNumbers(selector: "
            },
            {
              "kind": "Reference",
              "text": "EvaluableExpression",
              "canonicalReference": "fontoxpath!EvaluableExpression:type"
            },
            {
              "kind": "Content",
              "text": ", contextItem?: "
            },
            {
              "kind": "Content",
              "text": "any | null"
            },
            {
              "kind": "Content",
              "text": ", domFacade?: "
            },
            {
              "kind": "Reference",
              "text": "IDomFacade",
              "canonicalReference": "fontoxpath!default:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ", variables?: "
            },
            {
              "kind": "Content",
              "text": "{\n    [s: string]: any;\n} | null"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "Options",
              "canonicalReference": "fontoxpath!Options:type"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "selector",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "contextItem",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "domFacade",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              }
            },
            {
              "parameterName": "variables",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              }
            }
          ],
          "name": "evaluateXPathToNumbers"
        },
        {
          "kind": "Function",
          "canonicalReference": "fontoxpath!evaluateXPathToString:function(1)",
          "docComment": "/**\n * Evaluates an XPath on the given contextNode. Returns the string result as if the XPath is wrapped in string(...).\n *\n * @param selector - The selector to execute. Supports XPath 3.1.\n *\n * @param contextItem - The node from which to run the XPath.\n *\n * @param domFacade - The domFacade (or DomFacade like interface) for retrieving relations.\n *\n * @param variables - Extra variables (name to value). Values can be number, string, boolean, nodes or object literals and arrays.\n *\n * @param options - Extra options for evaluating this XPath.\n *\n * @returns The string result.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default function evaluateXPathToString(selector: "
            },
            {
              "kind": "Reference",
              "text": "EvaluableExpression",
              "canonicalReference": "fontoxpath!EvaluableExpression:type"
            },
            {
              "kind": "Content",
              "text": ", contextItem?: "
            },
            {
              "kind": "Content",
              "text": "any | null"
            },
            {
              "kind": "Content",
              "text": ", domFacade?: "
            },
            {
              "kind": "Reference",
              "text": "IDomFacade",
              "canonicalReference": "fontoxpath!default:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ", variables?: "
            },
            {
              "kind": "Content",
              "text": "{\n    [s: string]: any;\n} | null"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "Options",
              "canonicalReference": "fontoxpath!Options:type"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "selector",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "contextItem",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "domFacade",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              }
            },
            {
              "parameterName": "variables",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              }
            }
          ],
          "name": "evaluateXPathToString"
        },
        {
          "kind": "Function",
          "canonicalReference": "fontoxpath!evaluateXPathToStrings:function(1)",
          "docComment": "/**\n * Evaluates an XPath on the given contextNode. Returns the string result as if the XPath is wrapped in string(...).\n *\n * @param selector - The selector to execute. Supports XPath 3.1.\n *\n * @param contextItem - The node from which to run the XPath.\n *\n * @param domFacade - The domFacade (or DomFacade like interface) for retrieving relations.\n *\n * @param variables - Extra variables (name to value). Values can be number, string, boolean, nodes or object literals and arrays.\n *\n * @param options - Extra options for evaluating this XPath.\n *\n * @returns The string result.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default function evaluateXPathToStrings(selector: "
            },
            {
              "kind": "Reference",
              "text": "EvaluableExpression",
              "canonicalReference": "fontoxpath!EvaluableExpression:type"
            },
            {
              "kind": "Content",
              "text": ", contextItem?: "
            },
            {
              "kind": "Content",
              "text": "any | null"
            },
            {
              "kind": "Content",
              "text": ", domFacade?: "
            },
            {
              "kind": "Reference",
              "text": "IDomFacade",
              "canonicalReference": "fontoxpath!default:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ", variables?: "
            },
            {
              "kind": "Content",
              "text": "{\n    [s: string]: any;\n} | null"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "Options",
              "canonicalReference": "fontoxpath!Options:type"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "selector",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "contextItem",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "domFacade",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              }
            },
            {
              "parameterName": "variables",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              }
            }
          ],
          "name": "evaluateXPathToStrings"
        },
        {
          "kind": "Variable",
          "canonicalReference": "fontoxpath!executeJavaScriptCompiledXPath:var",
          "docComment": "/**\n * Execute XPath compiled to JavaScript that is evaluated to a function. For compiling XPath to JavaScript, see {@link compileXPathToJavaScript}.\n *\n * @param compiledXPathFunction - A function containing compiled XPath in its body.\n *\n * @param contextItem - The node from which to run the XPath.\n *\n * @param domFacade - The domFacade (or DomFacade like interface) for retrieving relation.\n *\n * @returns The result of executing this XPath.\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "executeJavaScriptCompiledXPath: "
            },
            {
              "kind": "Content",
              "text": "<TNode extends "
            },
            {
              "kind": "Reference",
              "text": "Node",
              "canonicalReference": "fontoxpath!Node:type"
            },
            {
              "kind": "Content",
              "text": ", TReturnType extends "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "fontoxpath!ReturnType:enum"
            },
            {
              "kind": "Content",
              "text": ">(compiledXPathFunction: "
            },
            {
              "kind": "Reference",
              "text": "CompiledXPathFunction",
              "canonicalReference": "fontoxpath!CompiledXPathFunction:type"
            },
            {
              "kind": "Content",
              "text": "<TNode, TReturnType>, contextItem?: any | null, domFacade?: "
            },
            {
              "kind": "Reference",
              "text": "IDomFacade",
              "canonicalReference": "fontoxpath!default:interface"
            },
            {
              "kind": "Content",
              "text": " | null) => "
            },
            {
              "kind": "Reference",
              "text": "IReturnTypes",
              "canonicalReference": "fontoxpath!IReturnTypes:interface"
            },
            {
              "kind": "Content",
              "text": "<TNode>[TReturnType]"
            }
          ],
          "releaseTag": "Beta",
          "name": "executeJavaScriptCompiledXPath",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 12
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "fontoxpath!executePendingUpdateList:function(1)",
          "docComment": "/**\n * @param pendingUpdateList - The updateScript to execute.\n *\n * @param domFacade - The domFacade (or DomFacade like interface) for retrieving relations.\n *\n * @param nodesFactory - The nodesFactory for creating nodes.\n *\n * @param documentWriter - The documentWriter for writing changes.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default function executePendingUpdateList(pendingUpdateList: "
            },
            {
              "kind": "Content",
              "text": "object[]"
            },
            {
              "kind": "Content",
              "text": ", domFacade?: "
            },
            {
              "kind": "Reference",
              "text": "IDomFacade",
              "canonicalReference": "fontoxpath!default:interface"
            },
            {
              "kind": "Content",
              "text": ", nodesFactory?: "
            },
            {
              "kind": "Reference",
              "text": "INodesFactory",
              "canonicalReference": "fontoxpath!default:interface"
            },
            {
              "kind": "Content",
              "text": ", documentWriter?: "
            },
            {
              "kind": "Reference",
              "text": "IDocumentWriter",
              "canonicalReference": "fontoxpath!default:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pendingUpdateList",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "domFacade",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "nodesFactory",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "documentWriter",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "executePendingUpdateList"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "fontoxpath!ExternalTypedValueFactory:type",
          "docComment": "/**\n * Creates a factory to convert values into a specific type.\n *\n * @param type - The type into which to convert the values.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare type ExternalTypedValueFactory = "
            },
            {
              "kind": "Content",
              "text": "(type: string) => (value: "
            },
            {
              "kind": "Reference",
              "text": "UntypedExternalValue",
              "canonicalReference": "fontoxpath!UntypedExternalValue:type"
            },
            {
              "kind": "Content",
              "text": ", domFacade: "
            },
            {
              "kind": "Reference",
              "text": "IDomFacade",
              "canonicalReference": "fontoxpath!default:interface"
            },
            {
              "kind": "Content",
              "text": ") => unknown"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ExternalTypedValueFactory",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "fontoxpath!FunctionNameResolver:type",
          "docComment": "/**\n * Resolves a function name to its resolved QName form\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type FunctionNameResolver = "
            },
            {
              "kind": "Content",
              "text": "(qname: "
            },
            {
              "kind": "Reference",
              "text": "LexicalQualifiedName",
              "canonicalReference": "fontoxpath!LexicalQualifiedName:type"
            },
            {
              "kind": "Content",
              "text": ", arity: number) => "
            },
            {
              "kind": "Reference",
              "text": "ResolvedQualifiedName",
              "canonicalReference": "fontoxpath!ResolvedQualifiedName:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "FunctionNameResolver",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "fontoxpath!getBucketForSelector:function(1)",
          "docComment": "/**\n * @param xpathExpression - The XPath for which a bucket should be retrieved\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function getBucketForSelector(xpathExpression: "
            },
            {
              "kind": "Reference",
              "text": "EvaluableExpression",
              "canonicalReference": "fontoxpath!EvaluableExpression:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Bucket",
              "canonicalReference": "fontoxpath!Bucket:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "xpathExpression",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "getBucketForSelector"
        },
        {
          "kind": "Function",
          "canonicalReference": "fontoxpath!getBucketsForNode:function(1)",
          "docComment": "/**\n * Get the buckets that apply to a given node.\n *\n * Buckets can be used to pre-filter XPath expressions to exclude those that will never match the given node.\n *\n * The bucket for a selector can be retrieved using {@link getBucketForSelector}.\n *\n * @param node - The node which buckets should be retrieved\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getBucketsForNode(node: "
            },
            {
              "kind": "Reference",
              "text": "Node",
              "canonicalReference": "fontoxpath!Node:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Bucket",
              "canonicalReference": "fontoxpath!Bucket:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "node",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "getBucketsForNode"
        },
        {
          "kind": "Interface",
          "canonicalReference": "fontoxpath!IAstAccepted:interface",
          "docComment": "/**\n * Successfully JavaScript compiled XPath.\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare interface IAstAccepted "
            }
          ],
          "releaseTag": "Beta",
          "name": "IAstAccepted",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "fontoxpath!IAstAccepted#code:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "code: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Beta",
              "name": "code",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "fontoxpath!IAstAccepted#isAstAccepted:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isAstAccepted: "
                },
                {
                  "kind": "Content",
                  "text": "true"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Beta",
              "name": "isAstAccepted",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "fontoxpath!IAstRejected:interface",
          "docComment": "/**\n * Result for failing to compile XPath to JavaScript.\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare interface IAstRejected "
            }
          ],
          "releaseTag": "Beta",
          "name": "IAstRejected",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "fontoxpath!IAstRejected#isAstAccepted:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isAstAccepted: "
                },
                {
                  "kind": "Content",
                  "text": "false"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Beta",
              "name": "isAstAccepted",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "fontoxpath!IAstRejected#reason:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reason: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Beta",
              "name": "reason",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "fontoxpath!IDocumentWriter:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default interface IDocumentWriter "
            }
          ],
          "releaseTag": "Public",
          "name": "IDocumentWriter",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "fontoxpath!IDocumentWriter#insertBefore:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "insertBefore(parent: "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "fontoxpath!Element:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Document",
                  "canonicalReference": "fontoxpath!Document:type"
                },
                {
                  "kind": "Content",
                  "text": ", newNode: "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "fontoxpath!Node:type"
                },
                {
                  "kind": "Content",
                  "text": ", referenceNode: "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "fontoxpath!Node:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "parent",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "newNode",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "referenceNode",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 9
                  }
                }
              ],
              "name": "insertBefore"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "fontoxpath!IDocumentWriter#removeAttributeNS:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeAttributeNS(node: "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "fontoxpath!Element:type"
                },
                {
                  "kind": "Content",
                  "text": ", namespace: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "node",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "namespace",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "removeAttributeNS"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "fontoxpath!IDocumentWriter#removeChild:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeChild(parent: "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "fontoxpath!Element:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Document",
                  "canonicalReference": "fontoxpath!Document:type"
                },
                {
                  "kind": "Content",
                  "text": ", child: "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "fontoxpath!Node:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "parent",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "child",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "removeChild"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "fontoxpath!IDocumentWriter#setAttributeNS:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setAttributeNS(node: "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "fontoxpath!Element:type"
                },
                {
                  "kind": "Content",
                  "text": ", namespace: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "node",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "namespace",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "setAttributeNS"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "fontoxpath!IDocumentWriter#setData:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setData(node: "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "fontoxpath!Node:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "node",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "setData"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "fontoxpath!IDomFacade:interface",
          "docComment": "/**\n * The base interface of a dom facade\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default interface IDomFacade "
            }
          ],
          "releaseTag": "Public",
          "name": "IDomFacade",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "fontoxpath!IDomFacade#getAllAttributes:member(1)",
              "docComment": "/**\n * Get all attributes of this element. The bucket can be used to narrow down which attributes should be retrieved.\n *\n * @param node - \n *\n * @param bucket - The bucket that matches the attribute that will be used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAllAttributes(node: "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "fontoxpath!Element:type"
                },
                {
                  "kind": "Content",
                  "text": ", bucket?: "
                },
                {
                  "kind": "Reference",
                  "text": "Bucket",
                  "canonicalReference": "fontoxpath!Bucket:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Attr",
                  "canonicalReference": "fontoxpath!Attr:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "node",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "bucket",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                }
              ],
              "name": "getAllAttributes"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "fontoxpath!IDomFacade#getAttribute:member(1)",
              "docComment": "/**\n * Get the value of specified attribute of this element.\n *\n * @param node - \n *\n * @param attributeName - \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAttribute(node: "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "fontoxpath!Element:type"
                },
                {
                  "kind": "Content",
                  "text": ", attributeName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "node",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "attributeName",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "getAttribute"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "fontoxpath!IDomFacade#getChildNodes:member(1)",
              "docComment": "/**\n * Get all child nodes of this element. The bucket can be used to narrow down which child nodes should be retrieved.\n *\n * @param node - \n *\n * @param bucket - The bucket that matches the attribute that will be used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getChildNodes(node: "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "fontoxpath!Node:type"
                },
                {
                  "kind": "Content",
                  "text": ", bucket?: "
                },
                {
                  "kind": "Reference",
                  "text": "Bucket",
                  "canonicalReference": "fontoxpath!Bucket:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "fontoxpath!Node:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "node",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "bucket",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                }
              ],
              "name": "getChildNodes"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "fontoxpath!IDomFacade#getData:member(1)",
              "docComment": "/**\n * Get the data of this element.\n *\n * @param node - \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getData(node: "
                },
                {
                  "kind": "Reference",
                  "text": "Attr",
                  "canonicalReference": "fontoxpath!Attr:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "CharacterData",
                  "canonicalReference": "fontoxpath!CharacterData:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "node",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "getData"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "fontoxpath!IDomFacade#getFirstChild:member(1)",
              "docComment": "/**\n * Get the first child of this element. An implementation of IDomFacade is free to interpret the bucket to skip returning nodes that do not match the bucket, or use this information to its advantage.\n *\n * @param node - \n *\n * @param bucket - The bucket that matches the attribute that will be used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getFirstChild(node: "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "fontoxpath!Node:type"
                },
                {
                  "kind": "Content",
                  "text": ", bucket?: "
                },
                {
                  "kind": "Reference",
                  "text": "Bucket",
                  "canonicalReference": "fontoxpath!Bucket:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "fontoxpath!Node:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "node",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "bucket",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                }
              ],
              "name": "getFirstChild"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "fontoxpath!IDomFacade#getLastChild:member(1)",
              "docComment": "/**\n * Get the last child of this element. An implementation of IDomFacade is free to interpret the bucket to skip returning nodes that do not match the bucket, or use this information to its advantage.\n *\n * @param node - \n *\n * @param bucket - The bucket that matches the attribute that will be used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getLastChild(node: "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "fontoxpath!Node:type"
                },
                {
                  "kind": "Content",
                  "text": ", bucket?: "
                },
                {
                  "kind": "Reference",
                  "text": "Bucket",
                  "canonicalReference": "fontoxpath!Bucket:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "fontoxpath!Node:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "node",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "bucket",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                }
              ],
              "name": "getLastChild"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "fontoxpath!IDomFacade#getNextSibling:member(1)",
              "docComment": "/**\n * Get the next sibling of this node An implementation of IDomFacade is free to interpret the bucket to skip returning nodes that do not match the bucket, or use this information to its advantage.\n *\n * @param node - \n *\n * @param bucket - The bucket that matches the nextSibling that is requested.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getNextSibling(node: "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "fontoxpath!Node:type"
                },
                {
                  "kind": "Content",
                  "text": ", bucket?: "
                },
                {
                  "kind": "Reference",
                  "text": "Bucket",
                  "canonicalReference": "fontoxpath!Bucket:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "fontoxpath!Node:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "node",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "bucket",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                }
              ],
              "name": "getNextSibling"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "fontoxpath!IDomFacade#getParentNode:member(1)",
              "docComment": "/**\n * Get the parent of this element. An implementation of IDomFacade is free to interpret the bucket to skip returning nodes that do not match the bucket, or use this information to its advantage.\n *\n * @param node - \n *\n * @param bucket - The bucket that matches the attribute that will be used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getParentNode(node: "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "fontoxpath!Node:type"
                },
                {
                  "kind": "Content",
                  "text": ", bucket?: "
                },
                {
                  "kind": "Reference",
                  "text": "Bucket",
                  "canonicalReference": "fontoxpath!Bucket:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "fontoxpath!Node:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "node",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "bucket",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                }
              ],
              "name": "getParentNode"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "fontoxpath!IDomFacade#getPreviousSibling:member(1)",
              "docComment": "/**\n * Get the previous sibling of this element. An implementation of IDomFacade is free to interpret the bucket to skip returning nodes that do not match the bucket, or use this information to its advantage.\n *\n * @param node - \n *\n * @param bucket - The bucket that matches the attribute that will be used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getPreviousSibling(node: "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "fontoxpath!Node:type"
                },
                {
                  "kind": "Content",
                  "text": ", bucket?: "
                },
                {
                  "kind": "Reference",
                  "text": "Bucket",
                  "canonicalReference": "fontoxpath!Bucket:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "fontoxpath!Node:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "node",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "bucket",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                }
              ],
              "name": "getPreviousSibling"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "fontoxpath!INodesFactory:interface",
          "docComment": "/**\n * Defines the factory methods used in XQuery. Basically equivalent to the Document interface, but with the 'createDocument' factory method added.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default interface INodesFactory extends "
            },
            {
              "kind": "Reference",
              "text": "ISimpleNodesFactory",
              "canonicalReference": "fontoxpath!default:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "INodesFactory",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "fontoxpath!INodesFactory#createDocument:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createDocument(): "
                },
                {
                  "kind": "Reference",
                  "text": "Document",
                  "canonicalReference": "fontoxpath!Document:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "createDocument"
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "fontoxpath!IReturnTypes:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IReturnTypes<T extends "
            },
            {
              "kind": "Reference",
              "text": "Node",
              "canonicalReference": "fontoxpath!Node:type"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "IReturnTypes",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "fontoxpath!IReturnTypes#\"0\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "ReturnType.ANY",
                  "canonicalReference": "fontoxpath!ReturnType.ANY:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"0\"",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "fontoxpath!IReturnTypes#\"1\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "ReturnType.NUMBER",
                  "canonicalReference": "fontoxpath!ReturnType.NUMBER:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"1\"",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "fontoxpath!IReturnTypes#\"10\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "ReturnType.STRINGS",
                  "canonicalReference": "fontoxpath!ReturnType.STRINGS:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"10\"",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "fontoxpath!IReturnTypes#\"11\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "ReturnType.MAP",
                  "canonicalReference": "fontoxpath!ReturnType.MAP:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [s: string]: any;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"11\"",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "fontoxpath!IReturnTypes#\"12\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "ReturnType.ARRAY",
                  "canonicalReference": "fontoxpath!ReturnType.ARRAY:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"12\"",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "fontoxpath!IReturnTypes#\"13\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "ReturnType.NUMBERS",
                  "canonicalReference": "fontoxpath!ReturnType.NUMBERS:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"13\"",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "fontoxpath!IReturnTypes#\"2\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "ReturnType.STRING",
                  "canonicalReference": "fontoxpath!ReturnType.STRING:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"2\"",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "fontoxpath!IReturnTypes#\"3\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "ReturnType.BOOLEAN",
                  "canonicalReference": "fontoxpath!ReturnType.BOOLEAN:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"3\"",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "fontoxpath!IReturnTypes#\"7\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "ReturnType.NODES",
                  "canonicalReference": "fontoxpath!ReturnType.NODES:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"7\"",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "fontoxpath!IReturnTypes#\"9\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "ReturnType.FIRST_NODE",
                  "canonicalReference": "fontoxpath!ReturnType.FIRST_NODE:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "T | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"9\"",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "fontoxpath!IReturnTypes#\"99\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "ReturnType.ASYNC_ITERATOR",
                  "canonicalReference": "fontoxpath!ReturnType.ASYNC_ITERATOR:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIterableIterator",
                  "canonicalReference": "!AsyncIterableIterator:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"99\"",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "fontoxpath!ISimpleNodesFactory:interface",
          "docComment": "/**\n * Subset of the constructor methods present on Document. Can be used to create textnodes, elements, attributes, CDataSecions, comments and processing instructions.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default interface ISimpleNodesFactory "
            }
          ],
          "releaseTag": "Public",
          "name": "ISimpleNodesFactory",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "fontoxpath!ISimpleNodesFactory#createAttributeNS:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createAttributeNS(namespaceURI: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Attr",
                  "canonicalReference": "fontoxpath!Attr:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "namespaceURI",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "createAttributeNS"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "fontoxpath!ISimpleNodesFactory#createCDATASection:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createCDATASection(contents: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "CDATASection",
                  "canonicalReference": "fontoxpath!CDATASection:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "contents",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "createCDATASection"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "fontoxpath!ISimpleNodesFactory#createComment:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createComment(contents: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Comment",
                  "canonicalReference": "fontoxpath!Comment:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "contents",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "createComment"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "fontoxpath!ISimpleNodesFactory#createElementNS:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createElementNS(namespaceURI: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "fontoxpath!Element:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "namespaceURI",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "createElementNS"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "fontoxpath!ISimpleNodesFactory#createProcessingInstruction:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createProcessingInstruction(target: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ProcessingInstruction",
                  "canonicalReference": "fontoxpath!ProcessingInstruction:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "createProcessingInstruction"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "fontoxpath!ISimpleNodesFactory#createTextNode:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createTextNode(contents: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Text",
                  "canonicalReference": "fontoxpath!Text:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "contents",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "createTextNode"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "fontoxpath!JavaScriptCompiledXPathResult:type",
          "docComment": "/**\n * Result for compiling XPath to JavaScript\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type JavaScriptCompiledXPathResult = "
            },
            {
              "kind": "Reference",
              "text": "IAstAccepted",
              "canonicalReference": "fontoxpath!IAstAccepted:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "IAstRejected",
              "canonicalReference": "fontoxpath!IAstRejected:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Beta",
          "name": "JavaScriptCompiledXPathResult",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "fontoxpath!Language:enum",
          "docComment": "/**\n * Specifies which language to use.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum Language "
            }
          ],
          "releaseTag": "Public",
          "name": "Language",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "fontoxpath!Language.XPATH_3_1_LANGUAGE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'XPATH_3_1_LANGUAGE' = "
                },
                {
                  "kind": "Content",
                  "text": "\"XPath3.1\""
                }
              ],
              "releaseTag": "Public",
              "name": "XPATH_3_1_LANGUAGE",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "fontoxpath!Language.XQUERY_3_1_LANGUAGE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'XQUERY_3_1_LANGUAGE' = "
                },
                {
                  "kind": "Content",
                  "text": "\"XQuery3.1\""
                }
              ],
              "releaseTag": "Public",
              "name": "XQUERY_3_1_LANGUAGE",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "fontoxpath!Language.XQUERY_UPDATE_3_1_LANGUAGE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'XQUERY_UPDATE_3_1_LANGUAGE' = "
                },
                {
                  "kind": "Content",
                  "text": "\"XQueryUpdate3.1\""
                }
              ],
              "releaseTag": "Public",
              "name": "XQUERY_UPDATE_3_1_LANGUAGE",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "fontoxpath!LexicalQualifiedName:type",
          "docComment": "/**\n * An unresolved qualified name. Exists of a prefix and a local name\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type LexicalQualifiedName = "
            },
            {
              "kind": "Content",
              "text": "{\n    localName: string;\n    prefix: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "LexicalQualifiedName",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "fontoxpath!Logger:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Logger = "
            },
            {
              "kind": "Content",
              "text": "{\n    trace: (message: string) => void;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Logger",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "fontoxpath!NamespaceResolver:type",
          "docComment": "/**\n * Resolves a namespace prefix to its URI\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type NamespaceResolver = "
            },
            {
              "kind": "Content",
              "text": "(prefix: string) => string | null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "NamespaceResolver",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "fontoxpath!Node_2:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Node = "
            },
            {
              "kind": "Content",
              "text": "{\n    nodeType: number;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Node_2",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "fontoxpath!Options:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Options = "
            },
            {
              "kind": "Content",
              "text": "{\n    annotateAst?: boolean;\n    currentContext?: any;\n    debug?: boolean;\n    defaultFunctionNamespaceURI?: string;\n    disableCache?: boolean;\n    documentWriter?: "
            },
            {
              "kind": "Reference",
              "text": "IDocumentWriter",
              "canonicalReference": "fontoxpath!default:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    functionNameResolver?: "
            },
            {
              "kind": "Reference",
              "text": "FunctionNameResolver",
              "canonicalReference": "fontoxpath!FunctionNameResolver:type"
            },
            {
              "kind": "Content",
              "text": ";\n    language?: "
            },
            {
              "kind": "Reference",
              "text": "Language",
              "canonicalReference": "fontoxpath!Language:enum"
            },
            {
              "kind": "Content",
              "text": ";\n    logger?: "
            },
            {
              "kind": "Reference",
              "text": "Logger",
              "canonicalReference": "fontoxpath!Logger:type"
            },
            {
              "kind": "Content",
              "text": ";\n    logUnannotatedQueries?: boolean;\n    moduleImports?: {\n        [s: string]: string;\n    };\n    namespaceResolver?: "
            },
            {
              "kind": "Reference",
              "text": "NamespaceResolver",
              "canonicalReference": "fontoxpath!NamespaceResolver:type"
            },
            {
              "kind": "Content",
              "text": ";\n    nodesFactory?: "
            },
            {
              "kind": "Reference",
              "text": "INodesFactory",
              "canonicalReference": "fontoxpath!default:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    xmlSerializer?: "
            },
            {
              "kind": "Reference",
              "text": "XMLSerializer",
              "canonicalReference": "fontoxpath!XMLSerializer:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Options",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 16
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "fontoxpath!parseScript:function(1)",
          "docComment": "/**\n * Parse an XPath or XQuery script and output it as an XQueryX element. Refer to the [XQueryX spec](https://www.w3.org/TR/xqueryx-31/) for more info.\n *\n * The precise generated XQueryX may change in the future when progress is made on supporting the XQueryX test set provided with the [QT3 test suite](https://dev.w3.org/2011/QT3-test-suite/).\n *\n * Note that the parseScript function returns a detached element: it is not added to the passed document.\n *\n * The element also contains the original expression as a comment.\n *\n * This may later be used for error processing to display the full original script instead of only referring to the AST.\n *\n * @param script - The script to parse\n *\n * @param options - Additional options for parsing. Can be used to switch between parsing XPath or XQuery update facility\n *\n * @param simpleNodesFactory - A NodesFactory will be used to create the DOM. This can be a reference to the document in which the XQueryX will be created\n *\n * @param documentWriter - The documentWriter will be used to append children to the newly created dom\n *\n * @example\n *\n * Parse \"self::element\" to an XQueryX element and access it\n * ```\n * const xqueryx = parseScript(\n *   'self::element',\n *   {\n *     language: evaluateXPath.XPATH_3_1_LANGUAGE\n *   },\n *   new slimdom.Document()\n * );\n *\n * // Get the nametest element\n * const nameTestElement = evaluateXPathToFirstNode(\n *   'descendant-or-self::Q{http://www.w3.org/2005/XQueryX}nameTest',\n *   xqueryx)\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default function parseScript<TElement extends "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "fontoxpath!Element:type"
            },
            {
              "kind": "Content",
              "text": ">(script: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", options: "
            },
            {
              "kind": "Reference",
              "text": "Options",
              "canonicalReference": "fontoxpath!Options:type"
            },
            {
              "kind": "Content",
              "text": ", simpleNodesFactory: "
            },
            {
              "kind": "Reference",
              "text": "ISimpleNodesFactory",
              "canonicalReference": "fontoxpath!default:interface"
            },
            {
              "kind": "Content",
              "text": ", documentWriter?: "
            },
            {
              "kind": "Reference",
              "text": "IDocumentWriter",
              "canonicalReference": "fontoxpath!default:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "TElement"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "script",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "simpleNodesFactory",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            },
            {
              "parameterName": "documentWriter",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "TElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "parseScript"
        },
        {
          "kind": "Function",
          "canonicalReference": "fontoxpath!precompileXPath:function(1)",
          "docComment": "/**\n * Precompile an XPath selector asynchronously.\n *\n * @deprecated\n *\n * This code is deprecated. This is a no-op!\n *\n * @param xPathString - The xPath which should be pre-compiled\n *\n * @returns A promise which is resolved with the xpath string after compilation.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default function precompileXPath(xPathString: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<string>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "xPathString",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "precompileXPath"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "fontoxpath!ProcessingInstruction_2:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ProcessingInstruction = "
            },
            {
              "kind": "Reference",
              "text": "CharacterData",
              "canonicalReference": "fontoxpath!CharacterData:type"
            },
            {
              "kind": "Content",
              "text": " & {\n    nodeName: string;\n    target: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ProcessingInstruction_2",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "fontoxpath!Profiler:type",
          "docComment": "/**\n * Offers tooling to profile how much time is being spent running XPaths.\n *\n * Note that Javascript custom functions are also included in the profile. If they call new XPaths themselves, they may overlap in measurement.\n *\n * For example, the xpath `app:custom-function(\"a\", \"b\")` calls a new XPath, the total time taken for that outer XPath will include the time taken for the inner one as well.\n *\n * @example\n *\n * import \\{ evaluateXPathToNodes, profiler \\} from 'fontoxpath'; // For browsers: profiler.setPerformanceImplementation(window.performance) // For NodeJS: profiler.setPerformanceImplementation(global.performance)\n *\n * profiler.startProfiling(); // Do loads of XPaths profiler.stopProfiling();\n *\n * const performanceSummary = profiler.getPerformanceSummary();\n *\n * // Do whatever with this profiler result console.log(`The most expensive XPath was ${performanceSummary[0].xpath}`);\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Profiler = "
            },
            {
              "kind": "Content",
              "text": "{\n    getPerformanceSummary(): "
            },
            {
              "kind": "Reference",
              "text": "XPathPerformanceMeasurement",
              "canonicalReference": "fontoxpath!XPathPerformanceMeasurement:type"
            },
            {
              "kind": "Content",
              "text": "[];\n    setPerformanceImplementation(performance: "
            },
            {
              "kind": "Reference",
              "text": "Performance",
              "canonicalReference": "!Performance:interface"
            },
            {
              "kind": "Content",
              "text": "): void;\n    startProfiling(): void;\n    stopProfiling(): void;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Profiler",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "fontoxpath!profiler:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "profiler: "
            },
            {
              "kind": "Reference",
              "text": "Profiler",
              "canonicalReference": "fontoxpath!Profiler:type"
            }
          ],
          "releaseTag": "Public",
          "name": "profiler",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "fontoxpath!registerCustomXPathFunction:function(1)",
          "docComment": "/**\n * Add a custom function for use in xpath-serialized expressions.\n *\n * @param name - The name of this custom function. The string overload is deprecated, please register functions using the object overload\n *\n * @param signature - The signature of the function, as array of strings (e.g. ['item()', 'node()?', 'xs:numeric'])\n *\n * @param returnType - The return type of the function, as sequence type (e.g. 'xs:boolean()')\n *\n * @param callback - The function itself, which gets the dynamicContext and arguments passed\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default function registerCustomXPathFunction(name: "
            },
            {
              "kind": "Content",
              "text": "string | {\n    localName: string;\n    namespaceURI: string;\n}"
            },
            {
              "kind": "Content",
              "text": ", signatureNames: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": ", returnTypeName: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", callback: "
            },
            {
              "kind": "Content",
              "text": "(domFacade: {\n    currentContext: any;\n    domFacade: "
            },
            {
              "kind": "Reference",
              "text": "IDomFacade",
              "canonicalReference": "fontoxpath!default:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}, ...functionArgs: any[]) => any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "name",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "signatureNames",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "returnTypeName",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "callback",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 10
              }
            }
          ],
          "name": "registerCustomXPathFunction"
        },
        {
          "kind": "Function",
          "canonicalReference": "fontoxpath!registerXQueryModule:function(1)",
          "docComment": "/**\n * Register an XQuery module\n *\n * @param moduleString - The string contents of the module\n *\n * @param options - Additional compilation options\n *\n * @returns The namespace uri of the new module\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default function registerXQueryModule(moduleString: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Content",
              "text": "{\n    debug: boolean;\n}"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "moduleString",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "registerXQueryModule"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "fontoxpath!ResolvedQualifiedName:type",
          "docComment": "/**\n * A qualified name, consists of a localname and a namespace URI\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ResolvedQualifiedName = "
            },
            {
              "kind": "Content",
              "text": "{\n    localName: string;\n    namespaceURI: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ResolvedQualifiedName",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "fontoxpath!ReturnType_2:enum",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum ReturnType "
            }
          ],
          "releaseTag": "Public",
          "name": "ReturnType_2",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "fontoxpath!ReturnType_2.ANY:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'ANY' = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "ANY",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "fontoxpath!ReturnType_2.ARRAY:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'ARRAY' = "
                },
                {
                  "kind": "Content",
                  "text": "12"
                }
              ],
              "releaseTag": "Public",
              "name": "ARRAY",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "fontoxpath!ReturnType_2.ASYNC_ITERATOR:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'ASYNC_ITERATOR' = "
                },
                {
                  "kind": "Content",
                  "text": "99"
                }
              ],
              "releaseTag": "Public",
              "name": "ASYNC_ITERATOR",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "fontoxpath!ReturnType_2.BOOLEAN:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'BOOLEAN' = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Public",
              "name": "BOOLEAN",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "fontoxpath!ReturnType_2.FIRST_NODE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'FIRST_NODE' = "
                },
                {
                  "kind": "Content",
                  "text": "9"
                }
              ],
              "releaseTag": "Public",
              "name": "FIRST_NODE",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "fontoxpath!ReturnType_2.MAP:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'MAP' = "
                },
                {
                  "kind": "Content",
                  "text": "11"
                }
              ],
              "releaseTag": "Public",
              "name": "MAP",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "fontoxpath!ReturnType_2.NODES:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'NODES' = "
                },
                {
                  "kind": "Content",
                  "text": "7"
                }
              ],
              "releaseTag": "Public",
              "name": "NODES",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "fontoxpath!ReturnType_2.NUMBER:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'NUMBER' = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "NUMBER",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "fontoxpath!ReturnType_2.NUMBERS:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'NUMBERS' = "
                },
                {
                  "kind": "Content",
                  "text": "13"
                }
              ],
              "releaseTag": "Public",
              "name": "NUMBERS",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "fontoxpath!ReturnType_2.STRING:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'STRING' = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "STRING",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "fontoxpath!ReturnType_2.STRINGS:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'STRINGS' = "
                },
                {
                  "kind": "Content",
                  "text": "10"
                }
              ],
              "releaseTag": "Public",
              "name": "STRINGS",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "fontoxpath!Text_2:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Text = "
            },
            {
              "kind": "Reference",
              "text": "CharacterData",
              "canonicalReference": "fontoxpath!CharacterData:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Text_2",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "fontoxpath!UpdatingOptions:type",
          "docComment": "/**\n * Type that contains a collection of options for the updating expression exaluation.\n *\n * annotateAst - If the AST should be annotated. debug - Sets the debug option for the evaluation context. disableCache - Sets if the cache should or should not be disabled. documentWriter - Sets the documentwriter object logger - Sets a logger object. moduleImports - Sets all the module imports. namespaceResolver - Callback to do namespace resolving. nodesFactory - Reference to a nodes factory object. returnType - The type that the evaluation function will return.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type UpdatingOptions = "
            },
            {
              "kind": "Content",
              "text": "{\n    annotateAst?: boolean;\n    debug?: boolean;\n    disableCache?: boolean;\n    documentWriter?: "
            },
            {
              "kind": "Reference",
              "text": "IDocumentWriter",
              "canonicalReference": "fontoxpath!default:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    logger?: "
            },
            {
              "kind": "Reference",
              "text": "Logger",
              "canonicalReference": "fontoxpath!Logger:type"
            },
            {
              "kind": "Content",
              "text": ";\n    moduleImports?: {\n        [s: string]: string;\n    };\n    namespaceResolver?: (s: string) => string | null;\n    nodesFactory?: "
            },
            {
              "kind": "Reference",
              "text": "INodesFactory",
              "canonicalReference": "fontoxpath!default:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    returnType?: "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "fontoxpath!ReturnType:enum"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "UpdatingOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "fontoxpath!ValidValue:type",
          "docComment": "/**\n * Any type is allowed expect: functions, symbols, undefined, and null\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ValidValue = "
            },
            {
              "kind": "Content",
              "text": "string | number | boolean | object | "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ValidValue",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "fontoxpath!ValidValueSequence:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type UntypedExternalValue = "
            },
            {
              "kind": "Reference",
              "text": "ValidValue",
              "canonicalReference": "fontoxpath!ValidValue:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "ValidValue",
              "canonicalReference": "fontoxpath!ValidValue:type"
            },
            {
              "kind": "Content",
              "text": "[] | null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ValidValueSequence",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "fontoxpath!XMLSerializer_2:type",
          "docComment": "/**\n * An XML serializer that can serialzie nodes. Used when the `fn:serialize` function is called with a node\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type XMLSerializer = "
            },
            {
              "kind": "Content",
              "text": "{\n    serializeToString: (root: "
            },
            {
              "kind": "Reference",
              "text": "Node",
              "canonicalReference": "fontoxpath!Node:type"
            },
            {
              "kind": "Content",
              "text": ") => string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "XMLSerializer_2",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "fontoxpath!XPathPerformanceMeasurement:type",
          "docComment": "/**\n * Describes the performance of a single XPath across multiple evaluations.\n *\n * See {@link profiler}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type XPathPerformanceMeasurement = "
            },
            {
              "kind": "Content",
              "text": "{\n    average: number;\n    times: number;\n    totalDuration: number;\n    xpath: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "XPathPerformanceMeasurement",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        }
      ]
    }
  ]
}
